{"version":3,"file":"static/js/737.1e944e14.chunk.js","mappings":"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","sources":["DevBook.js","components/Cart/PaymentForm.js","components/Cart/StripeContainer.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst DevBook = () => {\r\n    return (\r\n        <div className='dev__main'>\r\n           <h5 style={{color:'#8ef0ef'}}>How to get a first dev job</h5>    \r\n           <div className='dev__right'>\r\n                <div><h5>console.log(\"Hello World!\");</h5></div> \r\n           </div>\r\n          \r\n           <div className='dev__bottom'>\r\n             <h5>By: Ajnur Radovic</h5>\r\n           </div>\r\n             <div className='dev__side'>       \r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DevBook\r\n","import React,{useContext, useEffect, useState} from 'react'\r\nimport {CardElement, useStripe, useElements } from\"@stripe/react-stripe-js\"\r\nimport { CartContext } from '../../context/cart'\r\nimport {ImBook} from 'react-icons/im'\r\nimport {  useHistory, } from \"react-router-dom\";\r\nimport DevBook from '../../DevBook';\r\n\r\n\r\n\r\nconst PaymentForm = () => {\r\n  const { total} = useContext(CartContext)\r\n  const {cart}= useContext(CartContext)\r\n  const history = useHistory()\r\n  const {clearCart} = useContext(CartContext)\r\n  const [nameError, setNameError]=useState(null)\r\n  const [name, setName] = React.useState(\"\");\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [processing, setProcessing] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [clientSecret, setClientSecret] = useState('');\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  useEffect(() => {\r\n  \r\n    window\r\n      .fetch(\"https://audible-e-commerce.onrender.com/create-payment-intent\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({items: [{cart}]})\r\n      })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setClientSecret(data.clientSecret);\r\n      });\r\n  }, [cart]);\r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: 'Arial, sans-serif',\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#32325d\"\r\n        }\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n  const handleChange = async (event) => {\r\n    setDisabled(event.empty);\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleChangeInput = async (event) => {\r\n    const { value } = event.target;\r\n    setDisabled(!value); \r\n    setNameError(value ? \"\" : \"Please enter a name\");\r\n    setName(value)\r\n  };\r\n\r\n  const handleSubmit = async ev => {\r\n    ev.preventDefault();\r\n    setProcessing(true);\r\n     if (name.length > 0 ) {\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: 'name',\r\n        },\r\n      }\r\n      \r\n    });\r\n     \r\n    if (payload.error) {\r\n      setError(`Payment failed ${payload.error.message}`);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);     \r\n      setProcessing(false);\r\n      setSucceeded(true)\r\n      clearCart()\r\n    }\r\n    }\r\n    else{\r\n      setNameError('please enter the name')\r\n      setProcessing(false);    \r\n    }\r\n  }\r\n  useEffect(()=>{\r\n    setTimeout(() => {  \r\n    if(succeeded){\r\n      history.push('/')\r\n    }\r\n    }, 3000);\r\n  },[history, succeeded])\r\n \r\n\r\n \r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <div className='checkout__top'>\r\n      <h2 className='payment__cart'>1. Cart</h2>\r\n      <h2 className='payment__checkout'>2. Checkout</h2>\r\n      </div>\r\n      <div className='payment__cont'>\r\n       <label>Cardholder Name </label>\r\n       <input \r\n        placeholder='Please enter your Cardholder Name'\r\n        type=\"text\"\r\n        id=\"name\"\r\n        value={name}\r\n        onChange={handleChangeInput}\r\n         />\r\n        {nameError && (\r\n        <div className=\"card__error\" role=\"alert\">\r\n          <h4>Please enter a Cardholder Name</h4>\r\n        </div>\r\n      )}\r\n      </div>\r\n      <div className=\"stripe__input\">\r\n          <label htmlFor=\"card__element\">\r\n            Credit or Debit Card\r\n            </label>\r\n          <p className=\"stripe__info\">\r\n            Test using this credit card : <span>4242 4242 4242 4242</span>\r\n            <br />\r\n            Enter any 5 digits for the zip code\r\n            <br />\r\n            Enter any 3 digits for the CVC\r\n          </p>\r\n        </div>    \r\n    <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\r\n    {error && (\r\n        <div className=\"cards__error\" role=\"alert\">\r\n          <h4>{error}</h4>\r\n        </div>\r\n      )}\r\n      <div className='review__order'>\r\n      <h3>Review Order</h3>\r\n      <h4>Total amount to pay :<span className='total__payment'> ${total}</span></h4>\r\n      <button\r\n        className='purchase__button'\r\n        disabled={processing || disabled || succeeded}\r\n        id=\"submit\"\r\n      >     \r\n        <span id=\"button-text\">\r\n          {processing ? (\r\n            <div className=\"spinner\" id=\"spinner\">\r\n              <ImBook/>\r\n            </div>\r\n          ) : (\r\n            \"Complete purchase\"\r\n          )}\r\n        </span>\r\n      </button>\r\n      <button className='edit__button'onClick={()=> {history.push('/cart')}}>Edit Items</button>\r\n      </div>\r\n      <div className={succeeded  ? \"result-message\" : \"result-message hidden\"}>\r\n       <img src='./audible/money.gif' alt=''/>\r\n       <DevBook />\r\n        <h1>Payment succeeded</h1>       \r\n      </div>\r\n  \r\n    </form>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default PaymentForm","import React from 'react'\r\nimport {loadStripe} from '@stripe/stripe-js'\r\nimport {Elements, } from '@stripe/react-stripe-js'\r\nimport PaymentForm from './PaymentForm'\r\nconst PUBLIC_KEY=\"pk_test_51IaINYEqJWuHZaMS8NbdFT8M7ssdvFXOqBO8gwn1MjQCJ9Mq5kYdraTFG4Y28iJD9xLtaWKJanVLLbjlZrduQKHv00uJ0WbJnu\"\r\n\r\nconst stripeTestPromise = loadStripe(PUBLIC_KEY)\r\nconst StripeContainer = () => {\r\n    return (\r\n        <Elements stripe={stripeTestPromise}>\r\n            <PaymentForm   />\r\n        </Elements>\r\n    )\r\n}\r\nexport default StripeContainer\r\n"],"names":["DevBook","_jsxs","className","children","_jsx","style","color","PaymentForm","total","useContext","CartContext","cart","history","useHistory","clearCart","nameError","setNameError","useState","name","setName","React","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","useStripe","elements","useElements","useEffect","window","fetch","method","headers","body","JSON","stringify","items","then","res","json","data","setTimeout","push","id","onSubmit","async","ev","preventDefault","length","payload","confirmCardPayment","payment_method","card","getElement","CardElement","billing_details","message","placeholder","type","value","onChange","event","target","role","htmlFor","options","base","fontFamily","fontSmoothing","fontSize","invalid","iconColor","empty","ImBook","onClick","src","alt","stripeTestPromise","loadStripe","StripeContainer","Elements"],"sourceRoot":""}